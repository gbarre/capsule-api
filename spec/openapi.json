{
  "openapi": "3.0.2",
  "info": {
    "title": "Capsule API",
    "version": "1.0",
    "description": "Web Platform Management API",
    "contact": {
      "name": "API Support",
      "email": "support@example.com",
      "url": "http://example.com/support"
    },
    "termsOfService": "http://example.com/terms/",
    "license": {
      "name": "GNU GPLv3",
      "url": "https://www.gnu.org/licenses/gpl-3.0.en.html"
    }
  },
  "servers": [
    {
      "url": "https://{platform}.api.example.com/v1",
      "variables": {
        "platform": {
          "enum": [
            "elea",
            "dane"
          ],
          "default": "elea"
        }
      }
    }
  ],
  "components": {
    "securitySchemes": {
      "openId": {
        "type": "openIdConnect",
        "openIdConnectUrl": "https://example.com/.well-known/openid-configuration"
      }
    },
    "parameters": {
      "offset": {
        "in": "query",
        "name": "offset",
        "description": "The number of items to skip before collecting the result set",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        }
      },
      "limit": {
        "in": "query",
        "name": "limit",
        "description": "The number of items to return",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100,
          "default": 20
        }
      },
      "verbose": {
        "in": "query",
        "name": "verbose",
        "description": "Whether the response much display additional information about the requested resource",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "filters": {
        "in": "query",
        "name": "filters",
        "description": "The fields of the response to filter by",
        "required": false,
        "schema": {
          "type": "object",
          "default": {}
        },
        "style": "form",
        "explode": true
      },
      "capsule_id": {
        "in": "path",
        "name": "capsule_id",
        "required": true,
        "description": "Capsule GUID",
        "schema": {
          "type": "string"
        }
      },
      "addonId": {
        "in": "path",
        "name": "addonId",
        "required": true,
        "description": "AddOn GUID",
        "schema": {
          "type": "string"
        }
      },
      "runtimeId": {
        "in": "path",
        "name": "runtimeId",
        "required": true,
        "description": "Runtime GUID",
        "schema": {
          "type": "string"
        }
      },
      "userId": {
        "in": "path",
        "name": "userId",
        "required": true,
        "description": "User LDAP nsUniqueId",
        "schema": {
          "type": "string"
        }
      },
      "sshkeyId": {
        "in": "path",
        "name": "sshkeyId",
        "required": true,
        "description": "SSH Key GUID",
        "schema": {
          "type": "string"
        }
      }
    },
    "requestBodies": {},
    "responses": {
      "BadRequest": {
        "description": "Malformed request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthenticated user",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AuthError"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Insufficient rights",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NotFound": {
        "description": "The requested resource has not been found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "detail": {
            "type": "string"
          },
          "status": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "AuthError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "error_description": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "02d3e2a0-a925-4438-8199-2cd726d7b42d"
          },
          "publicKeys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "example": [
              "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCt+vNHscC4LbZY/YQP0hcV4QrwRlhqrcuhAvZZERmp NLLOWK4Neaa7ywikVGOOVcY+q3XRHPNZTVkEZhwm0F+/87LJpNhxhZu4BdJ2mfIwx0JS5gRflfeUxxLJ AwLXQZpcO7GRdz/w12EgBohHNbxJyKwL7DSFAnaZ08/tlsjoNRlo1k4NHFf5Xf8K3M1ZlXeSxNV9nlpX tD6tbVVJn18tDCZgSqH64m1+iVb05sB2htifgkBB+fCElRV/v7Eylc5Zu1EMTlrHmeHB3Yf8DpRMkwYH e4j+yDutLvhhZzGmrnNGcD8zZkE1pwKivjwBKee4Bee8NzVR7vMary2GkqY1 john@doe",
              "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCqDWN5ay+bKoNg/+DbugWvLjY6q+ODdelRkZTakj7U Nq+a40Vm+HHRT2tuoB1NxeR87UieJt9IxWiiTasb/Ss+OgcAn5l8kvQvRQe+dp10qbeQHzkrgjpsFj49 YDOVKRTrqm5X721TnpqAo2RjqGBeEU+y9REfXPNPMUsni3w/h/BQqJi/e2CRBRdgbi/3bO0Xf0Pt0bc/ 9jjF6vulqzttdbxowbee8bJlPyz/LnNcTGDdmw2PNQFwe0ZuhHsFzSLX4acM3je0+xcdlq0+Gq8nU5jz /x0SXuXFz9zFHPO3Ivko1VFdBXaqeb8wOluUjmOxJdDcg3Uqswc5Z08KU+9r jane@doe"
            ]
          },
          "role": {
            "type": "string",
            "enum": [
              "user",
              "admin",
              "superadmin"
            ],
            "default": "user",
            "description": "user:\n- can only sign in and administer owned capsules\n- can grant ownership to users on owned capsules\n- may create capsules depending on platform configuration\n\nadmin:\n- can perform base user actions\n- can create capsules and grant ownership to users on them\n- can also administer all capsules\n\nsuperadmin:\n- can perform admin actions\n- can assign admin and superadmin role to users\n- can create runtime models\n"
          }
        },
        "readOnly": true
      },
      "Runtime": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "a972e936-0840-4278-b5d2-8ec7af8836bc"
          },
          "name": {
            "type": "string",
            "example": "apache-2.4 php-7.2.x"
          },
          "description": {
            "type": "string",
            "example": "Stack web classique Apache 2.4 + PHP 7.2.x"
          },
          "family": {
            "type": "string",
            "example": "Apache PHP"
          },
          "type": {
            "type": "string",
            "enum": [
              "webapp",
              "addon"
            ]
          },
          "availableOpts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "accessLevel": {
                  "type": "string",
                  "enum": [
                    "user",
                    "admin",
                    "superadmin"
                  ]
                },
                "tag": {
                  "type": "string",
                  "example": "Apache"
                },
                "fieldName": {
                  "type": "string",
                  "example": "vhost.conf"
                },
                "fieldDescription": {
                  "type": "string",
                  "default": "",
                  "example": "Fichier de configuration du VirtualHost Apache2"
                },
                "valueType": {
                  "type": "string",
                  "enum": [
                    "string",
                    "integer",
                    "boolean",
                    "file"
                  ],
                  "example": "file"
                },
                "defaultValue": {
                  "type": "string",
                  "description": "type must match valueType",
                  "example": "{base64-encoded vhost.conf file content}"
                },
                "validationRules": {
                  "type": "object",
                  "default": {}
                }
              },
              "example": [
                {
                  "accessLevel": "user",
                  "tag": "Apache",
                  "fieldName": "vhost.conf",
                  "fieldDescription": "Fichier de configuration du VirtualHost Apache2",
                  "valueType": "file",
                  "defaultValue": "{base64-encoded vhost.conf file content}"
                },
                {
                  "accessLevel": "user",
                  "tag": "PHP",
                  "fieldName": "worker",
                  "fieldDescription": "Nombre de workers pour PHP",
                  "valueType": "integer",
                  "defaultValue": 6,
                  "validationRules": {
                    "min": 1,
                    "max": 42
                  }
                }
              ],
              "required": [
                "tag",
                "fieldName",
                "valueType",
                "accessLevel"
              ]
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-21T17:32:28Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2020-03-17T15:32:28Z"
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "WebApp": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "d41ea210-742a-410c-a971-3978143eab80"
          },
          "insecure": {
            "type": "boolean",
            "default": false,
            "nullable": true,
            "description": "mutually exclusive with tls"
          },
          "tls": {
            "type": "object",
            "properties": {
              "redirectHttps": {
                "type": "boolean",
                "default": true
              },
              "crt": {
                "type": "string",
                "writeOnly": true
              },
              "key": {
                "type": "string",
                "format": "password",
                "writeOnly": true
              }
            },
            "nullable": true,
            "required": [
              "crt",
              "key"
            ],
            "description": "mutually exclusive with insecure"
          },
          "fqdns": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "hostname",
              "pattern": "/^(?!:\\/\\/)([a-zA-Z0-9]+\\.)?[a-zA-Z0-9][a-zA-Z0-9-]+\\.[a-zA-Z]{2,6}?$/i"
            },
            "example": [
              "main.fqdn.ac-versailles.fr",
              "secondary.fqdn.ac-versailles.fr"
            ],
            "description": "first FQDN is the main one"
          },
          "runtimeId": {
            "type": "string",
            "example": "e48e31e2-e271-4a2c-aee4-e73caa8aa615"
          },
          "env": {
            "type": "object",
            "description": "Dict of environment variables",
            "example": {
              "HTTP_PROXY": "http://proxy:3128/",
              "HTTPS_PROXY": "https://proxy:3128/"
            }
          },
          "opts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "tag": {
                  "type": "string",
                  "example": "PHP"
                },
                "fieldName": {
                  "type": "string",
                  "example": "worker"
                },
                "value": {
                  "type": "string",
                  "example": 42
                }
              }
            },
            "default": []
          },
          "quota": {
            "description": "quota obtained from the capsule declaration",
            "type": "object",
            "properties": {
              "volumeSize": {
                "type": "integer",
                "readOnly": true,
                "example": 20
              },
              "memoryMax": {
                "type": "integer",
                "readOnly": true,
                "example": 4
              },
              "cpuMax": {
                "type": "number",
                "readOnly": true,
                "example": 2.5
              }
            },
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-21T17:32:28Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2020-03-17T15:32:28Z"
          }
        },
        "required": [
          "fqdns",
          "runtimeId"
        ]
      },
      "AddOn": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "e461015b-7820-4693-87d3-3e05cc490006"
          },
          "name": {
            "type": "string",
            "example": "MySQL-1"
          },
          "description": {
            "type": "string",
            "default": "",
            "example": "Service de base de données pour ma capsule"
          },
          "uri": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "mysql://username:password@host/database"
          },
          "runtimeId": {
            "type": "string",
            "example": "d4541bee-eb0d-472a-9956-6bbfd63442c0"
          },
          "env": {
            "type": "object",
            "description": "Dict of environment variables",
            "example": {
              "HTTP_PROXY": "http://proxy:3128/",
              "HTTPS_PROXY": "https://proxy:3128/"
            }
          },
          "opts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "tag": {
                  "type": "string"
                },
                "fieldName": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              }
            },
            "default": [],
            "example": []
          },
          "quota": {
            "description": "quota obtained from the capsule declaration",
            "type": "object",
            "properties": {
              "volumeSize": {
                "type": "integer",
                "readOnly": true,
                "example": 20
              },
              "memoryMax": {
                "type": "integer",
                "readOnly": true,
                "example": 4
              },
              "cpuMax": {
                "type": "number",
                "readOnly": true,
                "example": 2.5
              }
            },
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-21T17:32:28Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2020-03-17T15:32:28Z"
          }
        },
        "required": [
          "name",
          "runtimeId"
        ]
      },
      "Capsule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "695d0f1a-beb2-4145-828d-0f7f0fcc6696",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "example": "lyc-vernes-osny"
          },
          "owners": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "jdoe",
              "jdoe1"
            ],
            "uniqueItems": true,
            "minItems": 1
          },
          "webapp": {
            "type": "string",
            "nullable": true,
            "example": "1ba583fb-9731-48f1-afd8-93f8d514faff"
          },
          "addons": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "24236e31-9a9a-42b5-a6fb-2e32f36e054f",
              "bee09122-5b09-4f9c-bc20-9e639f1510bb"
            ],
            "uniqueItems": true,
            "default": []
          },
          "authorizedKeys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true,
            "example": [
              "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCt+vNHscC4LbZY/YQP0hcV4QrwRlhqrcuhAvZZERmp NLLOWK4Neaa7ywikVGOOVcY+q3XRHPNZTVkEZhwm0F+/87LJpNhxhZu4BdJ2mfIwx0JS5gRflfeUxxLJ AwLXQZpcO7GRdz/w12EgBohHNbxJyKwL7DSFAnaZ08/tlsjoNRlo1k4NHFf5Xf8K3M1ZlXeSxNV9nlpX tD6tbVVJn18tDCZgSqH64m1+iVb05sB2htifgkBB+fCElRV/v7Eylc5Zu1EMTlrHmeHB3Yf8DpRMkwYH e4j+yDutLvhhZzGmrnNGcD8zZkE1pwKivjwBKee4Bee8NzVR7vMary2GkqY1 john@doe",
              "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCqDWN5ay+bKoNg/+DbugWvLjY6q+ODdelRkZTakj7U Nq+a40Vm+HHRT2tuoB1NxeR87UieJt9IxWiiTasb/Ss+OgcAn5l8kvQvRQe+dp10qbeQHzkrgjpsFj49 YDOVKRTrqm5X721TnpqAo2RjqGBeEU+y9REfXPNPMUsni3w/h/BQqJi/e2CRBRdgbi/3bO0Xf0Pt0bc/ 9jjF6vulqzttdbxowbee8bJlPyz/LnNcTGDdmw2PNQFwe0ZuhHsFzSLX4acM3je0+xcdlq0+Gq8nU5jz /x0SXuXFz9zFHPO3Ivko1VFdBXaqeb8wOluUjmOxJdDcg3Uqswc5Z08KU+9r jane@doe"
            ]
          },
          "quota": {
            "type": "object",
            "properties": {
              "volumeSize": {
                "type": "integer",
                "example": 20
              },
              "memoryMax": {
                "type": "integer",
                "example": 8
              },
              "cpuMax": {
                "type": "number",
                "example": 2.5
              }
            },
            "default": {}
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-07-21T17:32:28Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2020-03-17T15:32:28Z"
          }
        },
        "required": [
          "name",
          "owners"
        ]
      }
    }
  },
  "paths": {
    "/users": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Gets the users.\n",
        "summary": "Get users",
        "operationId": "api.users.search",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/filters"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "admin"
        ],
        "description": "Gets a user.\n",
        "summary": "Get a user",
        "operationId": "api.users.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/capsules": {
      "post": {
        "tags": [
          "admin"
        ],
        "description": "Creates a capsule",
        "summary": "Add a new capsule",
        "operationId": "api.capsules.post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Capsule"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Capsule created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Capsule"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "Created capsule URI",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      },
      "get": {
        "tags": [
          "user"
        ],
        "description": "Gets the capsules.\n",
        "summary": "Get capsules.",
        "operationId": "api.capsules.search",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/filters"
          },
          {
            "$ref": "#/components/parameters/verbose"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested capsules",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Capsule"
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/capsules/{capsule_id}": {
      "get": {
        "tags": [
          "user"
        ],
        "description": "Gets details about a capsule.\n",
        "summary": "Get details about a capsule",
        "operationId": "api.capsules.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/capsule_id"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested capsule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Capsule"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "superadmin"
        ],
        "description": "Deletes a capsule.\n",
        "summary": "Delete a capsule",
        "operationId": "api.capsules.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/capsule_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful deletion"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/capsules/{capsule_id}/owners": {
      "get": {
        "tags": [
          "user"
        ],
        "description": "Gets all owners of a capsule.\n",
        "summary": "Gets owners of a capsule",
        "operationId": "api.capsules.owners.search",
        "parameters": [
          {
            "$ref": "#/components/parameters/capsule_id"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/filters"
          }
        ],
        "responses": {
          "200": {
            "description": "List of the owners of the capsule",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      },
      "patch": {
        "tags": [
          "user"
        ],
        "description": "Adds a new owner to a capsule.\n",
        "summary": "Add an owner to a capsule",
        "operationId": "api.capsules.owners.patch",
        "parameters": [
          {
            "$ref": "#/components/parameters/capsule_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "newOwner": {
                    "type": "string",
                    "example": "04b41ffb-2144-4f28-acb2-b3f3741ca7dc"
                  }
                }
              }
            },
            "text/plain": {
              "schema": {
                "type": "string",
                "example": "04b41ffb-2144-4f28-acb2-b3f3741ca7dc"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Owner added to the capsule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Capsule"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "description": "Requested user is already owner of this capsule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/capsules/{capsule_id}/owners/{userId}": {
      "delete": {
        "tags": [
          "user"
        ],
        "description": "Removes an owner from a capsule.\n",
        "summary": "Remove an owner from a capsule",
        "operationId": "api.capsules.owners.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/capsule_id"
          },
          {
            "$ref": "#/components/parameters/userId"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful deletion"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "description": "You cannot remove yourself",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/capsules/{capsule_id}/webapp": {
      "post": {
        "tags": [
          "user"
        ],
        "description": "Creates a web application for a capsule.\\\nFirst element of `fqdns` will be the main fully qualified domain name,\nthe other elements will be understood as aliases.\n",
        "summary": "Add a new webapp to a capsule",
        "operationId": "api.capsules.webapp.post",
        "parameters": [
          {
            "$ref": "#/components/parameters/capsule_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebApp"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "WebApp added to the capsule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApp"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "description": "A web application already exists for this capsule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "user"
        ],
        "description": "Gets the web application for a capsule.\\\n",
        "summary": "Get a webapp for a capsule",
        "operationId": "api.capsules.webapp.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/capsule_id"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested web application for a capsule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApp"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "description": "Updates or creates a web application for a capsule.\\\nFirst element of `fqdns` will be the main FQDN,\nthe other elements will be understood as aliases.\n",
        "summary": "Updates or creates a webapp for a capsule",
        "operationId": "api.capsules.webapp.put",
        "parameters": [
          {
            "$ref": "#/components/parameters/capsule_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebApp"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "WebApp updated for the capsule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApp"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "Created capsule URI",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "201": {
            "description": "WebApp added to the capsule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApp"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "description": "Deletes the web application for a capsule\n",
        "summary": "Delete a webapp for a capsule",
        "operationId": "api.capsules.webapp.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/capsule_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful deletion"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/capsules/{capsule_id}/addons": {
      "post": {
        "tags": [
          "user"
        ],
        "description": "Add a new addon to a capsule.\n",
        "summary": "Add an addon to a capsule",
        "operationId": "api.capsules.addons.post",
        "parameters": [
          {
            "$ref": "#/components/parameters/capsule_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddOn"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "AddOn added to the capsule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddOn"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "Created addon URI",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      },
      "get": {
        "tags": [
          "user"
        ],
        "description": "Gets the addons of a capsule.\n",
        "summary": "Get the addons of a capsule",
        "operationId": "api.capsules.addons.search",
        "parameters": [
          {
            "$ref": "#/components/parameters/capsule_id"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/filters"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested addons of a capsule",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AddOn"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/capsules/{capsule_id}/addons/{addonId}": {
      "put": {
        "tags": [
          "user"
        ],
        "description": "Only updates an addon for a capsule.\\\nA **NotFound** error will be returned\nif the addon does not exist.\n",
        "summary": "Update an addon for a capsule",
        "operationId": "api.capsules.addons.put",
        "parameters": [
          {
            "$ref": "#/components/parameters/capsule_id"
          },
          {
            "$ref": "#/components/parameters/addonId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddOn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Addon updated for the capsule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddOn"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "Created addon URI",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "get": {
        "tags": [
          "user"
        ],
        "description": "Gets details about an addon for a capsule.\n",
        "summary": "Get an addon for a capsule",
        "operationId": "api.capsules.addons.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/capsule_id"
          },
          {
            "$ref": "#/components/parameters/addonId"
          }
        ],
        "responses": {
          "200": {
            "description": "AddOn added to the capsule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddOn"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "description": "Deletes an addon for a capsule.\n",
        "summary": "Delete an addon for a capsule",
        "operationId": "api.capsules.addons.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/capsule_id"
          },
          {
            "$ref": "#/components/parameters/addonId"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful deletion"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/runtimes": {
      "get": {
        "tags": [
          "user"
        ],
        "description": "Gets the runtimes.\n",
        "summary": "Get the runtimes",
        "operationId": "api.runtimes.search",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/filters"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested runtimes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Runtime"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "superadmin"
        ],
        "description": "Creates a new runtime.\n",
        "summary": "Add a runtime",
        "operationId": "api.runtimes.post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Runtime"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The added runtime model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Runtime"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/runtimes/{runtimeId}": {
      "get": {
        "tags": [
          "user"
        ],
        "description": "Gets details about a runtime.\n",
        "summary": "Get details about a runtime",
        "operationId": "api.runtimes.get",
        "parameters": [
          {
            "$ref": "#/components/parameters/runtimeId"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested runtime",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Runtime"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "superadmin"
        ],
        "description": "Creates or updates a runtime.\n",
        "summary": "Update a runtime",
        "operationId": "api.runtimes.put",
        "parameters": [
          {
            "$ref": "#/components/parameters/runtimeId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Runtime"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated runtime",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Runtime"
                }
              }
            }
          },
          "201": {
            "description": "The added runtime",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Runtime"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      },
      "delete": {
        "tags": [
          "superadmin"
        ],
        "description": "Deletes a runtime.\n",
        "summary": "Delete a runtime",
        "operationId": "api.runtimes.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/runtimeId"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful deletion"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/sshkeys": {
      "get": {
        "tags": [
          "user"
        ],
        "description": "Gets my public SSH keys",
        "summary": "Get my public SSH keys",
        "operationId": "api.sshkeys.search",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested SSH keys",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCt+vNHscC4LbZY/YQP0hcV4QrwRlhqrcuhAvZZERmp NLLOWK4Neaa7ywikVGOOVcY+q3XRHPNZTVkEZhwm0F+/87LJpNhxhZu4BdJ2mfIwx0JS5gRflfeUxxLJ AwLXQZpcO7GRdz/w12EgBohHNbxJyKwL7DSFAnaZ08/tlsjoNRlo1k4NHFf5Xf8K3M1ZlXeSxNV9nlpX tD6tbVVJn18tDCZgSqH64m1+iVb05sB2htifgkBB+fCElRV/v7Eylc5Zu1EMTlrHmeHB3Yf8DpRMkwYH e4j+yDutLvhhZzGmrnNGcD8zZkE1pwKivjwBKee4Bee8NzVR7vMary2GkqY1 john@doe",
                    "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCqDWN5ay+bKoNg/+DbugWvLjY6q+ODdelRkZTakj7U Nq+a40Vm+HHRT2tuoB1NxeR87UieJt9IxWiiTasb/Ss+OgcAn5l8kvQvRQe+dp10qbeQHzkrgjpsFj49 YDOVKRTrqm5X721TnpqAo2RjqGBeEU+y9REfXPNPMUsni3w/h/BQqJi/e2CRBRdgbi/3bO0Xf0Pt0bc/ 9jjF6vulqzttdbxowbee8bJlPyz/LnNcTGDdmw2PNQFwe0ZuhHsFzSLX4acM3je0+xcdlq0+Gq8nU5jz /x0SXuXFz9zFHPO3Ivko1VFdBXaqeb8wOluUjmOxJdDcg3Uqswc5Z08KU+9r jane@doe"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "description": "Adds a public SSH key to my account.",
        "summary": "Add a public SSH key",
        "operationId": "api.sshkeys.post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "example": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCt+vNHscC4LbZY/YQP0hcV4QrwRlhqrcuhAvZZERmp NLLOWK4Neaa7ywikVGOOVcY+q3XRHPNZTVkEZhwm0F+/87LJpNhxhZu4BdJ2mfIwx0JS5gRflfeUxxLJ AwLXQZpcO7GRdz/w12EgBohHNbxJyKwL7DSFAnaZ08/tlsjoNRlo1k4NHFf5Xf8K3M1ZlXeSxNV9nlpX tD6tbVVJn18tDCZgSqH64m1+iVb05sB2htifgkBB+fCElRV/v7Eylc5Zu1EMTlrHmeHB3Yf8DpRMkwYH e4j+yDutLvhhZzGmrnNGcD8zZkE1pwKivjwBKee4Bee8NzVR7vMary2GkqY1 john@doe"
              }
            },
            "text/plain": {
              "schema": {
                "type": "string",
                "example": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCt+vNHscC4LbZY/YQP0hcV4QrwRlhqrcuhAvZZERmp NLLOWK4Neaa7ywikVGOOVcY+q3XRHPNZTVkEZhwm0F+/87LJpNhxhZu4BdJ2mfIwx0JS5gRflfeUxxLJ AwLXQZpcO7GRdz/w12EgBohHNbxJyKwL7DSFAnaZ08/tlsjoNRlo1k4NHFf5Xf8K3M1ZlXeSxNV9nlpX tD6tbVVJn18tDCZgSqH64m1+iVb05sB2htifgkBB+fCElRV/v7Eylc5Zu1EMTlrHmeHB3Yf8DpRMkwYH e4j+yDutLvhhZzGmrnNGcD8zZkE1pwKivjwBKee4Bee8NzVR7vMary2GkqY1 john@doe"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The updated user profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/sshkeys/{sshkeyId}": {
      "delete": {
        "tags": [
          "user"
        ],
        "description": "Deletes a public key.\n",
        "summary": "Delete a public key",
        "operationId": "api.sshkeys.delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/sshkeyId"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful deletion"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    }
  }
}
